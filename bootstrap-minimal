#!/bin/bash
# A script to prepare and install a Raspbian system on a SD card.
#

# Debootstrap params
#-----------------------------------------------------------
MIRROR="http://mirrordirector.raspbian.org/raspbian/"
ARCH="armhf"
RELEASE="wheezy"

# Build environment
#-----------------------------------------------------------
BUILD_DIRECTORY="/root/rpi"
IMAGE_FILE=""
TARGET_DEVICE=$1

# Functions
#-----------------------------------------------------------
is_host_arm() {
    local host_arch=$(uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/)

    if [ "${host_arch}" = "arm" ]; then
        return 1
    else
        return 0
    fi
}

do_create_image()
{
    echo "Creating image file."

    IMAGE_FILE="${BUILD_DIRECTORY}/$(date +%Y-%m-%d)-raspbian-basic-${DEBIAN_RELEASE}.img"

    dd if=/dev/zero of=$IMAGE_FILE bs=1MB count=700 >& /dev/null
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create image file ${image}."
        exit 1
    fi
}

do_create_partitions() {
    local device=$TARGET_DEVICE

    if [ -n "${IMAGE_FILE}" ]; then
		device=$(losetup -f --show $IMAGE_FILE)
	fi

    echo "Partitioning ${device}."

	fdisk $device << EOF
n
p
1
 
+64M
t
c
n
p
2
 
 
w
EOF
    if [ $? -ne 0 ]; then
        if [ -n "${IMAGE_FILE}" ]; then
            losetup -d /dev/loop0
        fi
        echo "Error: failed to create partitions."
        exit 1
    fi

	if [ -n "${IMAGE_FILE}" ]; then
        losetup -d /dev/loop0
    fi
}


# Entry point
#-----------------------------------------------------------

# The script must be run as root
if [ $EUID -ne 0 ]; then
    echo "This tool must be run as root: # sudo $0" 1>&2
    exit 1
fi

# Prerequisites
apt-get -y -qq install mount util-linux debootstrap parted e2fsprogs dosfstools
if is_host_arm; then
    apt-get -y -qq install qemu-user-static binfmt-support
fi

do_create_image
do_create_partitions

